import React from 'react'
import { render, screen } from '@testing-library/react'
import { describe, it, expect } from 'vitest'
import RationaleSection from '../RationaleSection'
import { TodayResponse } from '@/lib/types'

const mockRationale: TodayResponse['pick']['rationale'] = {
  topFactors: [
    'Strong home record (15-3)',
    'Key player returning from injury',
    'Favorable weather conditions'
  ],
  reasoning: 'The Lakers have shown exceptional performance at home this season with a 15-3 record. The return of their star player from injury significantly boosts their offensive capabilities.'
}

describe('RationaleSection', () => {
  it('renders loading state correctly', () => {
    render(<RationaleSection rationale={null} isLoading={true} />)
    
    expect(document.querySelector('.animate-pulse')).toBeTruthy()
  })

  it('renders no rationale state correctly', () => {
    render(<RationaleSection rationale={null} isLoading={false} />)
    
    expect(screen.getByText('No Analysis Available')).toBeInTheDocument()
    expect(screen.getByText(/ML reasoning is not available/)).toBeInTheDocument()
  })

  it('renders rationale with reasoning and factors correctly', () => {
    render(<RationaleSection rationale={mockRationale} isLoading={false} />)
    
    expect(screen.getByText('AI Analysis')).toBeInTheDocument()
    expect(screen.getByText('Reasoning')).toBeInTheDocument()
    expect(screen.getByText(mockRationale.reasoning)).toBeInTheDocument()
    expect(screen.getByText('Key Factors')).toBeInTheDocument()
    
    mockRationale.topFactors.forEach((factor, index) => {
      expect(screen.getByText(factor)).toBeInTheDocument()
      expect(screen.getByText((index + 1).toString())).toBeInTheDocument()
    })
  })

  it('renders rationale with only reasoning', () => {
    const rationaleWithoutFactors = {
      reasoning: mockRationale.reasoning,
      topFactors: []
    }
    
    render(<RationaleSection rationale={rationaleWithoutFactors} isLoading={false} />)
    
    expect(screen.getByText('AI Analysis')).toBeInTheDocument()
    expect(screen.getByText('Reasoning')).toBeInTheDocument()
    expect(screen.getByText(mockRationale.reasoning)).toBeInTheDocument()
    expect(screen.queryByText('Key Factors')).not.toBeInTheDocument()
  })

  it('renders rationale with only factors', () => {
    const rationaleWithoutReasoning = {
      topFactors: mockRationale.topFactors,
      reasoning: ''
    }
    
    render(<RationaleSection rationale={rationaleWithoutReasoning} isLoading={false} />)
    
    expect(screen.getByText('AI Analysis')).toBeInTheDocument()
    expect(screen.getByText('Key Factors')).toBeInTheDocument()
    expect(screen.queryByText('Reasoning')).not.toBeInTheDocument()
    
    mockRationale.topFactors.forEach(factor => {
      expect(screen.getByText(factor)).toBeInTheDocument()
    })
  })

  it('renders empty state when no reasoning or factors', () => {
    const emptyRationale = {
      reasoning: '',
      topFactors: []
    }
    
    render(<RationaleSection rationale={emptyRationale} isLoading={false} />)
    
    expect(screen.getByText('AI Analysis')).toBeInTheDocument()
    expect(screen.getByText(/Detailed analysis is not available/)).toBeInTheDocument()
  })

  it('displays ML attribution footer', () => {
    render(<RationaleSection rationale={mockRationale} isLoading={false} />)
    
    expect(screen.getByText(/Analysis generated by machine learning algorithms/)).toBeInTheDocument()
  })
})